{"version":3,"sources":["0_querys.js","1_paint.js","2_search.js","3_fav_characters.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["// querySelector\n\nconst input = document.querySelector(\".js-input \");\nconst btn = document.querySelector(\".js-button-search\");\nconst favourites = document.querySelector(\".js-favouritesList\");\nconst results = document.querySelector(\".js-resultsList\");\n\n// Variables globales(Vatiables con datos de la app, array de objetos)\nlet actors = [];\nlet favouriteCharacters = [];\n","// Petición al servidor con fetch y función para pintar los personajes en la web\n\nfunction renderCharacters() {\n  let html = \"\";\n\n  for (const characters of actors) {\n    html += `<li>\n      <article class =\"article js-articles\" id= \"${characters.char_id}\">\n      <img class=\"img\" src=${characters.img}>\n      <h3 class = \"name\"> ${characters.name}</h3>\n      <p class = \"status\">${characters.status}</p>\n      </article>\n      </li>;`;\n  }\n\n  results.innerHTML = html;\n  addCharactersEvent();\n}\n\nfetch(\"https://breakingbadapi.com/api/characters\")\n  .then((response) => response.json())\n  .then((dataResult) => {\n    console.log(dataResult);\n    actors = dataResult;\n    renderCharacters();\n  });\n","// Evento y función manejadora para buscar personajes. La petición de búsqueda se ha hecho con petición al servidor. Mirar TolowerCase\n\nfunction handleClickSearch(ev) {\n  ev.preventDefault();\n\n  const searchValue = input.value;\n\n  fetch(`https://breakingbadapi.com/api/characters?name=${searchValue}`)\n    .then((response) => response.json())\n    .then((data) => {\n      console.log(data);\n      actors = data;\n      renderCharacters(actors);\n    });\n}\n\nbtn.addEventListener(\"click\", handleClickSearch);\n","\"use strict\";\nfunction addCharactersEvent() {\n  const allArticles = document.querySelectorAll(\".js-articles\");\n  for (const eachArticles of allArticles) {\n    eachArticles.addEventListener(\"click\", handleArticles);\n  }\n  function handleArticles(ev) {\n    ev.currentTarget.classList.toggle(\"selected\");\n    const selectFav = actors.find(\n      (eachCharactersObj) =>\n        eachCharactersObj.char_id === parseInt(ev.currentTarget.id)\n    );\n\n    const OneFavourite = favouriteCharacters.find(\n      (eachCharactersObj) =>\n        eachCharactersObj.char_id === parseInt(ev.currentTarget.id)\n    );\n\n    if (!OneFavourite) {\n      favouriteCharacters.push(selectFav);\n    }\n\n    renderFavourites();\n  }\n}\nfunction renderFavourites() {\n  let html = \"\";\n\n  for (const characters of favouriteCharacters) {\n    html += `<li>\n        <article class =\"article js-articles\" id= \"${characters.char_id}\">\n        <img class=\"img\" src=${characters.img}>\n        <h3 class = \"name\"> ${characters.name}</h3>\n        <p class = \"status\">${characters.status}</p>\n        </article>\n        </li>;`;\n  }\n\n  favourites.innerHTML = html;\n}\n"]}